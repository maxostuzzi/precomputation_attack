import timeit

#dictionary of primes of the form p=4*3*l_2*...*l_n-1 for l_i small odd primes

prime_dict = {65817799889709847979: [3,5,7,11,13,19,31,37,47,53,59,61,71,79],382792541267556419:[3,5,7,11,13,17,19,31,47,53,59,61,71],26815806285055787:[3,7,11,13,17,19,31,37,41,47,53,59],454505191272131: [3,7,11,13,17,19,31,37,41,47,53], 8575569646643:[3,7,11,13,17,19,31,37,41,47],53664390779:[3,5,7,11,13,19,31,37,41],1450388939:[3,5,7,11,13,19,31,41],19399379:[3,5,7,11,13,17,19],1021019:[3,5,7,11,13,17],78539:[3,5,7,11,17],1019:[3,5,17], 419:[3,5,7], 59: [3,5]}

import concurrent.futures
import pickle
import statistics as stat

#precomputation test for exp_number times

def worker(i):
	print(i) 
	set_random_seed(int(i) + 10)
	start = timeit.default_timer()
	D = rw_ends_dict(s, t)
	end = timeit.default_timer()
	return end - start

def precomputation_test(s, t):
	with concurrent.futures.ProcessPoolExecutor(max_workers = 100) as executor: 
		results = list(executor.map(worker, range(100)))
	return results 

result_dict = {}
for key, value in prime_dict.items():
	ls = value # Elkies primes
	p = 4 * prod(ls) - 1
	max_exp = ceil((sqrt(p) ** (1/len(ls)) - 1) / 2)
	t=ceil((2*max_exp+1)^(len(ls)/3))
	s=ceil((2*max_exp+1)^(len(ls)/3))
	Fp2.<i> = GF(p**2, modulus = x**2 + 1)
	result_dict[key]=precomputation_test(s, t)
	with open("./precomputation.pkl","wb") as f1:
		pickle.dump(result_dict, f1)  				#then you can unpickle


#online test for exp_number times

exp_number = 100

def worker(i):
	print(i) 
	set_random_seed(int(i) + 10)
	private_key = private()
	public_key = action(0, private_key)
	start = timeit.default_timer()
	result = detect_collision(D, public_key, t)
	end = timeit.default_timer()
	if type(result) == str:
		return [0, end - start]
	else:
		return [1, end - start]


def online_test(D, s, t):
	with concurrent.futures.ProcessPoolExecutor(max_workers = exp_number) as executor: 
		results = list(executor.map(worker, range(exp_number)))
	return results

result_dict = {}
for key, value in prime_dict.items():
	ls = value # Elkies primes
	p = 4 * prod(ls) - 1
	max_exp = ceil((sqrt(p) ** (1/len(ls)) - 1) / 2)
	t=ceil((2*max_exp+1)^(len(ls)/3))
	s=ceil((2*max_exp+1)^(len(ls)/3))
	Fp2.<i> = GF(p**2, modulus = x**2 + 1)
	D = rw_ends_dict(s, t)
	result_dict[key]=online_test(D,s,t)
	with open("online","wb") as f1:
		pickle.dump(result_dict, f1)

#to unpickle
success = [0 for i in range(exp_number)]			#list of successful online phase at the first try for each prime
averages = []        						#list of average runtimes for each prime
for data, value in result_dict.items():
	for i in range(exp_number):
		if type(value[i]) == str:
			success[i] += 1
	averages.append(stat.fmean([value[i][1] for i in range(exp_number)]))  
